{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","CartItem/CartItem.styles.ts","CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Item","item","addToCartHandler","src","image","alt","title","description","price","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","toFixed","size","disableElevation","variant","id","aside","Cart","items","cartItems","length","map","reduce","acc","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ee16e6fa.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  border: 2px solid #daa520;\r\n  border-radius: 20px;\r\n  height: 100%;\r\n  transition: all 0.3s linear;\r\n  cursor: pointer;\r\n  filter: grayscale(50%);\r\n\r\n  :hover {\r\n    transform: scale(1.05);\r\n    filter: grayscale(0%);\r\n  }\r\n\r\n  button {\r\n    border-radius: 0 0 20px 20px;\r\n  }\r\n\r\n  img {\r\n    max-height: 250px;\r\n    object-fit: scale-down;\r\n    margin: 10px;\r\n    border-radius: 20px 20px 0 0;\r\n  }\r\n\r\n  div {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    padding: 1rem;\r\n    height: 100%;\r\n  }\r\n\r\n  p {\r\n    overflow: hidden;\r\n  }\r\n`;\r\n","import Button from '@material-ui/core/Button';\r\n\r\n// types\r\nimport { CartItemType } from '../App';\r\n\r\n// styles\r\nimport { Wrapper } from './Item.styles';\r\n\r\ntype Props = {\r\n  item: CartItemType;\r\n  addToCartHandler: (clickedItem: CartItemType) => void;\r\n  // RemoveFromCartHandler:;\r\n};\r\n\r\nconst Item: React.FC<Props> = ({ item, addToCartHandler }) => (\r\n  <Wrapper>\r\n    <img src={item.image} alt={item.title} />\r\n    <div>\r\n      <h3>{item.title}</h3>\r\n      <p>{item.description}</p>\r\n      <h3>$ {item.price}</h3>\r\n    </div>\r\n    <Button onClick={() => addToCartHandler(item)}>Add to cart</Button>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Item;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  border-bottom: 2px solid #daa520;\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n\r\n  div {\r\n    flex: 1;\r\n  }\r\n\r\n  .information,\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  img {\r\n    max-width: 80px;\r\n    object-fit: cover;\r\n    margin-left: 28px;\r\n  }\r\n\r\n  h3 {\r\n    margin: 0;\r\n  }\r\n`;\r\n","import Button from '@material-ui/core/Button';\r\n\r\n// types\r\nimport { CartItemType } from '../App';\r\n// import Item from '../Item/Item';\r\n\r\n// styles\r\nimport { Wrapper } from './CartItem.styles';\r\n\r\ntype Props = {\r\n  item: CartItemType;\r\n  addToCart: (clickedItem: CartItemType) => void;\r\n  removeFromCart: (id: number) => void;\r\n};\r\n\r\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => (\r\n  <Wrapper>\r\n    <div>\r\n      <h3>{item.title}</h3>\r\n      <div className='information'>\r\n        <p>Price: ${item.price}</p>\r\n        <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\r\n      </div>\r\n      <div className='buttons'>\r\n        <Button size='small' disableElevation variant='contained' onClick={() => removeFromCart(item.id)}>\r\n          -\r\n        </Button>\r\n        <p>{item.amount}</p>\r\n        <Button size='small' disableElevation variant='contained' onClick={() => addToCart(item)}>\r\n          +\r\n        </Button>\r\n      </div>\r\n    </div>\r\n    <img src={item.image} alt={item.title} />\r\n  </Wrapper>\r\n);\r\n\r\nexport default CartItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.aside`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  width: 500px;\r\n  padding: 20px;\r\n`;\r\n","import CartItem from '../CartItem/CartItem';\r\n\r\n// styles\r\nimport { Wrapper } from './Cart.styles';\r\n\r\n// type\r\nimport { CartItemType } from '../App';\r\n\r\ntype Props = {\r\n  cartItems: CartItemType[];\r\n  addToCart: (clickedItem: CartItemType) => void;\r\n  removeFromCart: (id: number) => void;\r\n};\r\n\r\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\r\n  const calculateTotal = (items: CartItemType[]) =>\r\n    items.reduce((acc: number, item) => acc + item.amount * item.price, 0);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h2>Shopping cart</h2>\r\n\r\n      {/* check if the cart is empty */}\r\n      {cartItems.length === 0 ? <p>No items yet...</p> : null}\r\n      {cartItems.map((item) => (\r\n        <CartItem key={item.id} item={item} addToCart={addToCart} removeFromCart={removeFromCart} />\r\n      ))}\r\n      <h2>Total: $ {calculateTotal(cartItems).toFixed(2)}</h2>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import styled from 'styled-components';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport const Wrapper = styled.div`\r\n  margin: 40px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  > h1 {\r\n    text-align: center;\r\n    margin-bottom: 40px;\r\n  }\r\n\r\n  > p {\r\n    margin: 40px;\r\n  }\r\n`;\r\n\r\nexport const StyledButton = styled(IconButton)`\r\n  position: fixed;\r\n  z-index: 2;\r\n  top: 20px;\r\n  right: 20px;\r\n`;\r\n","import { useState } from 'react';\nimport { useQuery } from 'react-query';\n\n// components\nimport Item from './Item/Item';\nimport Cart from './Cart/Cart';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\n\n// styles\nimport { Wrapper, StyledButton } from './App.styles';\n\n// types\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('https://fakestoreapi.com/products')).json(); // converting to JSON is also async\n\nconst App = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n\n  const { data, isLoading, error } = useQuery<CartItemType[]>('products', getProducts);\n\n  const getTotalItems = (items: CartItemType[]) => items.reduce((acc: number, item) => acc + item.amount, 0);\n\n  const addToCartHandler = (clickedItem: CartItemType) => {\n    setCartItems((prev) => {\n      // is the item already in cart?\n      const isItemInCart = prev.find((item) => item.id === clickedItem.id);\n\n      if (isItemInCart) {\n        return prev.map((item) => (item.id === clickedItem.id ? { ...item, amount: item.amount + 1 } : item));\n      }\n\n      // first time item is added\n\n      return [...prev, { ...clickedItem, amount: 1 }];\n    });\n  };\n\n  const removeFromCartHandle = (id: number) => {\n    setCartItems((prev) =>\n      prev.reduce((acc, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) return acc;\n          return [...acc, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...acc, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong...</div>;\n\n  return (\n    <Wrapper>\n      <h1>Little shop of randomness</h1>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart cartItems={cartItems} addToCart={addToCartHandler} removeFromCart={removeFromCartHandle} />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n\n      <Grid container spacing={5}>\n        {data?.map((item) => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} addToCartHandler={addToCartHandler} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={client}>\n    <App />\n  </QueryClientProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}